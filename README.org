* What is it?
=haskell-emacs= is a library which tries to allow extensions of emacs
to be in haskell.  It provides an interface with haskell functions,
which can be run from emacs in a synchronous and in an asynchronous
manner.

* Examples
Consider that you've got the following toy haskell-program:

#+BEGIN_EXAMPLE haskell
-- /home/foo/.emacs.d/haskell-fun/digitSum.hs
import Data.Char (digitToInt)

main :: IO ()
main = interact $ show . sum . map digitToInt
#+END_EXAMPLE

Now compile it
#+BEGIN_EXAMPLE
ghc -O2 digitSum
#+END_EXAMPLE

Start your emacs and evaluate following expression:
#+BEGIN_EXAMPLE elisp
(require 'haskell-emacs)
(haskell-emacs-init)
#+END_EXAMPLE

Now you're set to toy around with your new elisp functions:
#+BEGIN_EXAMPLE elisp
(digitSum 74)
 => "11"
#+END_EXAMPLE

Now consider you want to do some heavy async work:
#+BEGIN_EXAMPLE elisp
(setq my-Data nil)
(while (< (length my-Data) 10000)
  (add-to-list 'my-Data (random 1000000000)))

(let ((multi-core-computation (mapcar 'digitSum-async my-Data)))
  (setq my-Result (mapcar 'eval multi-core-computation)))
#+END_EXAMPLE

First, we have created a big list of random numbers, afterwards we
calculate with multiple cores simultaneously the map of our function
over our data and finaly we retrieve and wait for the result by
calling eval and store it.

Alternatively, you can call
#+BEGIN_EXAMPLE elisp
(setq my-Result (mapcar 'eval (mapcar 'digitSum-async my-Data)))
#+END_EXAMPLE

It would be wise to run the async calculation as soon as you've got
the required input for the function and retrieve the output as late as
possible, in this way, not only your async processes will be executed
in parallel, but also your elisp code in parallel to your haskell
function.

#+BEGIN_EXAMPLE elisp
(let ((multi (mapcar 'digitSum-async my-Data)))
  ;; ... do your other elisp stuff here ...
  (apply '+ (mapcar (lambda (n) (string-to-number (eval n))) multi)))
#+END_EXAMPLE

Perhaps you have noticed: already the second map of =digitSum= on your
=my-Data= is vastly faster, this is due to result caching.  If you
want to make the entire computation, you have to fill your =my-data=
with other random numbers.

* Details
On running =haskell-emacs-init=, every haskell program which is in a
customizeable directory (the default is =~/.emacs.d/haskell-fun/= will
get a wrapper to call it with a emacs function of the same name.  This
function receives optional an input string and arguments and returns
the result into a hash-table and to the user.  If the same function
with the same arguments is called again, it will use the result from
the hash-table to speed up things.

If one uses the async version of a function ("-async" is appended to
the function name), a expression is returned which can be evaluated to
get (and wait for if necessary) the result.  If the non-async version
is called while the async function calculates the result, the
non-async version will be aware of the calculation and simply block
emacs and wait for the result from the async process.

* Pitfalls
At least at the moment, the cache from the hash-table doesn't expire,
so if you use a lot haskell functions which return big objects (like
huge buffer-strings) a lot of memory will be consumed.

Functions only return strings, so if you expect a number to be
returned, you have to convert the result yourself.

Some overhead is required to pipe your input, start the programm etc,
so for very trivial use cases, emacs inbuilds are faster.

=haskell-emacs= considers every haskell program as pure, it happily
assumes that your program spits out the same result with the same
arguments.  If this is not the case, be aware that the result is
cached: each haskell program with the same arguments gets executed at
most one time.
